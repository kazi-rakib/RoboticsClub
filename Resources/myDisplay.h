/*
 * Project for Robotics Club
 *
 * https://github.com/kazi-rakib/RoboticsClub/Resources
 *
 * by Rakib Hasan
 */
// DISPLAY ====================================================================
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'LSCC_Robotics_Club_logo.bmp'
 */
const unsigned char logo [] PROGMEM = {
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11000000,B00000001,B11111111,B11111011,B11111111,
  B11111111,B11111111,B11111110,B00000011,B11000000,B01111111,B11100111,B11111111,
  B11111111,B11111111,B11111000,B01111111,B11111110,B00011111,B11001111,B11111111,
  B11111111,B11111111,B11100001,B11111111,B11111111,B11000111,B10011111,B11111111,
  B11111111,B11111111,B11000111,B11111110,B01111111,B11100010,B01111111,B11111111,
  B11111111,B11111111,B10011111,B11110001,B10001101,B11111000,B11111111,B11111111,
  B11111111,B11111111,B00111110,B01110010,B01001010,B11111100,B01111111,B11111111,
  B11111111,B11111110,B01111110,B11111111,B11111010,B10011110,B00111111,B11111111,
  B11111111,B11111100,B11110011,B00111111,B11111101,B10111111,B00111111,B11111111,
  B11111111,B11111001,B11110111,B11111111,B11111111,B01101111,B10011111,B11111111,
  B11111111,B11110011,B11111001,B11111111,B11111111,B11101111,B11001111,B11111111,
  B11111111,B11110011,B11000111,B11111111,B11111111,B11111001,B11101111,B11111111,
  B11111111,B11100111,B11100111,B11111111,B11111111,B11110111,B11100111,B11111111,
  B11111111,B11101111,B11111111,B11111000,B00011111,B11111011,B11110111,B11111111,
  B11111111,B11001111,B01011111,B11110000,B00001111,B11111110,B01110011,B11111111,
  B11111111,B11001111,B00111111,B11100001,B00000111,B11111100,B11110011,B11111111,
  B11111111,B11011111,B11111111,B11110010,B00101111,B11111111,B11111011,B11111111,
  B11111111,B10011111,B11111111,B11111011,B11011111,B11111111,B11111001,B11111111,
  B11111111,B10011111,B11111111,B11111111,B11111111,B11111111,B11111001,B11111111,
  B11111111,B10011111,B11111110,B00110000,B00000100,B01111111,B11111001,B11111111,
  B11111111,B11111111,B11111110,B00001111,B11110000,B01111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B00100111,B11100110,B01111111,B11111111,B11111111,
  B11111100,B00111011,B11111111,B11100111,B11100111,B11111111,B11011100,B00111111,
  B11111110,B00111011,B11111101,B11100111,B11100111,B10111111,B01011100,B01111111,
  B11111111,B11111111,B11111100,B01101100,B00010110,B00111111,B11111111,B11111111,
  B11111111,B11111111,B11111100,B01110011,B11001110,B00011111,B11111111,B11111111,
  B11111111,B11111111,B11111100,B01111101,B10111111,B00011111,B11111101,B11111111,
  B11111111,B11111111,B11111100,B11100101,B10100111,B00111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11100110,B01100111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111101,B11100111,B11100111,B11111111,B11111111,B11111111,
  B11111111,B11011111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11101111,B11000011,B11000011,B11110111,B11111111,B11111111,
  B11111111,B11101111,B11100111,B10000011,B11000001,B11100111,B11111111,B11111111,
  B11111111,B11100111,B11100011,B11000111,B11100011,B11000011,B11111111,B11111111,
  B11111111,B11110111,B11010001,B11111111,B11111111,B10000011,B11111111,B11111111,
  B11111111,B11110011,B11011110,B01111111,B11111110,B01101011,B11111111,B11111111,
  B11111111,B11111001,B11101101,B10111111,B11111101,B11110111,B11111111,B11111111,
  B11111111,B11111100,B11111111,B01100011,B10000111,B11111111,B11111111,B11111111,
  B11111111,B11111110,B11001111,B01111110,B01111111,B10111111,B11111111,B11111111,
  B11111111,B11111110,B00100111,B11111110,B11011011,B10111111,B11111111,B11111111,
  B11111111,B11111111,B00011011,B11101110,B11101100,B11111111,B11111111,B11111111,
  B11111111,B11111110,B01001111,B11111100,B01101111,B11111111,B11111111,B11111111,
  B11111111,B11111100,B11100011,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111011,B11111000,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11110111,B11111110,B00111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11101111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,
  B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111
};

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
 
// ------------------- For i2c -------------------
//// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

void initializeMyDisplay() {
  // DISPLAY ====================================================================
  // ------------------- For SPI -------------------
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
//  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
//    Serial.println(F("SSD1306 allocation failed"));
//    for(;;); // Don't proceed, loop forever
//  }
 
//  ------------------- For i2c -------------------
//  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  Serial.println(F("Initialized!"));
 
  // Show initial display buffer contents on the screen --
  display.clearDisplay();
  display.drawBitmap(32, 0, logo, 64, 64, WHITE);
  display.display();
  delay(1000);
}

void myDisplay(char * label, float data, char * unit) {
  // DISPLAY =====================================================
  display.clearDisplay();
  display.setTextSize(1.5);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.print(label);
  display.print(":\n\n ");
  display.setTextSize(4);
  display.println(data, 1);
  display.setTextSize(2);
  display.setCursor(0, 51);
  // display.print("\n       ");
  display.println(unit);
  display.display();
  // delay(100);  
}

